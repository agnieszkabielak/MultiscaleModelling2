package montecarlo;

import java.awt.Color;
import static java.awt.Color.BLACK;
import java.awt.Graphics;
import java.awt.Point;
import static java.lang.Math.exp;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;

public final class GUI extends javax.swing.JFrame {

    public GUI() {
        initComponents();
        initCustomComponents();
        Lattice = new Color[SIZE][SIZE];
        LatticeBefore = new Color[SIZE][SIZE];
        Energy = new int [SIZE][SIZE];
            
        for (int i = 0; i < SIZE; i++)
        {
            for (int j = 0; j < SIZE; j++)
            {
                Lattice[i][j] = BLACK;
            }
        }   
        renderLattice();
    }  
        
    public class ColoredPoint extends Point{
        public Color color;

        public ColoredPoint(int x, int y, Color color) {
            super(x, y);
            this.color = color;
        }

        public ColoredPoint(Point point, Color color) {
            super(point);
            this.color = color;
        }
    }
    
    static int SIZE = 100;
    Color[][] Lattice;
    Color[][] LatticeBefore;
    int[][] Energy;
    ArrayList<Color> mcColors;
    ArrayList<Color> caColors;
    ArrayList<Color> nucleonColors;
          
    private void initCustomComponents() {

    pack();
    }// </editor-fold>                        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        displayPanel = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        displayPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 298, Short.MAX_VALUE)
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 224, Short.MAX_VALUE)
        );

        jTabbedPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTabbedPane2.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        jButton1.setText("MC");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Iterations:");

        jTextField2.setText("10");

        jLabel2.setText("Colors: ");

        jTextField1.setText("10");

        jButton3.setText("DualPhase");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel7.setText("Colors: ");

        jTextField5.setText("10");

        jButton4.setText("CA");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton1)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(28, 28, 28)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(32, 32, 32))
        );

        jTabbedPane2.addTab("Monte Carlo", jPanel3);

        jLabel4.setText("Inside");

        jTextField4.setText("1");

        jLabel3.setText("Edges");

        jTextField3.setText("1");

        jButton2.setText("Energy");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("On borders");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setSelected(true);
        jRadioButton2.setText("Inside");

        jLabel6.setText("Nucleons");

        jTextField6.setText("5");

        jLabel5.setText("Iterations");

        jTextField7.setText("5");

        jButton6.setText("Recrystalization");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton5.setText("Reset");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton6)
                    .addComponent(jButton5)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addGap(18, 18, 18)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton2)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Nucleation Energy", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(displayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(133, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(displayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(218, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    void MonteCarlo(boolean dualPhase)
    {
        int colorNumber = Integer.parseInt(jTextField1.getText());
        int iterations = Integer.parseInt(jTextField2.getText());
        mcColors = getRandomColors(colorNumber);
        
        randomSeed(mcColors, dualPhase);
                
        renderLattice();
        
        for(int iter = 0; iter < iterations; iter++)
        {
            ArrayList<Point> points = randomPoints();
            for (Point p : points) {
                List<Point> neighbours = getNeighbours(p.x, p.y);

                Random r = new Random();
                Color newColor;

                for(;;)
                {
                    do {
                        int index = r.nextInt(neighbours.size());
                        Point point = neighbours.get(index);
                        newColor = Lattice[point.x][point.y];
                    } while (newColor == BLACK);

                    if (getEnergy(p.x, p.y, neighbours, newColor) <= getEnergy(p.x, p.y, neighbours, null)) {
                        Lattice[p.x][p.y] = newColor;
                        break;
                    }
                    else
                    {
                        int delta = getEnergy(p.x, p.y, neighbours, newColor) - getEnergy(p.x, p.y, neighbours, null);
                        double kbt = 0.1;
                        double probability = exp((-delta) / kbt) * 100;
                        int randInt = r.nextInt(100);
                        if (randInt < probability) {
                            Lattice[p.x][p.y] = newColor;
                            break;
                        }
                    }
                }
            }
            renderLattice();
        } 
        renderLattice(); 
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int energyInside = Integer.parseInt(jTextField4.getText());
        int energyEdges = Integer.parseInt(jTextField3.getText());
        int maxEnergy = energyInside > energyEdges ? energyInside : energyEdges;    
        
        Graphics g = getGraphics();
        
        for (int i = 1; i < SIZE - 1; i++) {
            for (int j = 1; j < SIZE - 1; j++) {
                List<Point> neighbours = getNeighbours(i, j);
                Energy[i][j] = isCellBound(i, j, neighbours) ?  energyEdges : energyInside;
                g.setColor(new Color(0, 0, 255 * Energy[i][j]/maxEnergy));
                g.fillRect(displayPanel.getX() + i * 4, displayPanel.getY() + j * 4, 4, 4);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    void dualPhase()
    {
        Random r = new Random();
        Color inclusion;
        
        if(mcColors != null)
        {
            inclusion = mcColors.get(r.nextInt(mcColors.size()));
            mcColors.clear();
        }
        else
        {
            inclusion = caColors.get(r.nextInt(caColors.size()));
            caColors.clear();
        }  
        
        for(int i = 1; i < SIZE - 1; i++)
        {
            for (int j = 1; j<SIZE - 1; j++)
            {
                Lattice[i][j] = Lattice[i][j] == inclusion ? BLACK : Lattice[i][j];
            }
        }
        renderLattice(); 
        
        MonteCarlo(true); 
    }
    
    void CA(boolean dualPhase)
    {
        int colorNumber = Integer.parseInt(jTextField5.getText());
       
        caColors = getRandomColors(colorNumber);
        randomSeedGrain(caColors, dualPhase);

        renderLattice();

        while(!isFull(Lattice))
        {
            for(int i = 0; i < Lattice.length; i++)
            {
                LatticeBefore[i] = Lattice[i].clone();
            }

            Lattice = growthStep(Lattice, LatticeBefore);
            renderLattice();
        }
        renderLattice();   
    }
  
    boolean isFull(Color[][] matrix)
    {
        for (int i = 1; i < SIZE - 1; i++) {
            for (int j = 1; j < SIZE - 1; j++) { 
                if(matrix[i][j] == BLACK)
                    return false;
            }
        }
        return true;
    }

    public List<Point> VonNeumannNeighbours(Color[][] matrix, int x, int y) {
        List<Point> neighbours = new LinkedList<>();

        neighbours.add(new Point(x, y + 1));
        neighbours.add(new Point(x, y - 1));
        neighbours.add(new Point(x - 1, y));
        neighbours.add(new Point(x + 1, y));

        return neighbours;
    }
    
    public Color[][] growthStep(Color[][] matrix, Color[][] tmp) {
        for (int y = 1; y < tmp.length - 1; y++) {
            for (int x = 1; x < tmp[0].length - 1; x++) {
                if (tmp[y][x] == Color.black) {
                    List<Point> neighbours = VonNeumannNeighbours(tmp, x, y);
                    int counterWinner = 0;
                    Color winner = tmp[y][x];
                    for (Point p : neighbours) {
                        if (tmp[p.y][p.x] != Color.black) {
                            int counter = 0;
                            for (Point pp : neighbours) {
                                if (tmp[p.y][p.x] == tmp[pp.y][pp.x]) {
                                    counter++;
                                }
                            }
                            if (counter > counterWinner) {
                                counterWinner = counter;
                                winner = tmp[p.y][p.x];
                            }
                        }
                    }
                    if (winner != Color.black) {
                        matrix[y][x] = winner;
                    }
                }
            }
        }
        return matrix;
    }  
    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Reset();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        Crystalize();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        CA(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        dualPhase();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        MonteCarlo(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    void Crystalize()
    {
        int colorNumber = Integer.parseInt(jTextField6.getText());
        int iterations = Integer.parseInt(jTextField7.getText());
        nucleonColors = getRandomNucleonColors(colorNumber);
        
        randomSeedGrainNucleon(nucleonColors, jRadioButton2.isSelected());         
        renderLattice();

        for(int iter = 0; iter < iterations; iter++)
        {
            ArrayList<Point> points = randomPoints();
            for (Point p : points) {
                List<Point> neighbours = getNeighbours(p.x, p.y);
                Random r = new Random();
                Color newColor;
                do {
                    int index = r.nextInt(neighbours.size());
                    Point point = neighbours.get(index);
                    newColor = Lattice[point.x][point.y];
                } while (newColor == BLACK);

                if(nucleonColors.contains(newColor))
                {
                    if (getEnergy(p.x, p.y, neighbours, newColor) <= getEnergy(p.x, p.y, neighbours, null) + Energy[p.x][p.y]) {
                        Lattice[p.x][p.y] = newColor;
                        break;
                    }
                    else
                    {
                        int delta = getEnergy(p.x, p.y, neighbours, newColor) - getEnergy(p.x, p.y, neighbours, null) + Energy[p.x][p.y];
                        double kbt = 0.1;
                        double probability = exp((-delta) / kbt) * 100;
                        int randInt = r.nextInt(100);
                        if (randInt < probability) {
                            Lattice[p.x][p.y] = newColor;
                            break;
                        }
                    }
                }
            }
            renderLattice();
        } 
        renderLattice(); 
    }

    void renderLattice()
    {
        Graphics g = getGraphics();
                        
        for (int i = 1; i < SIZE - 1; i++) {
            for (int j = 1; j < SIZE - 1; j++) {
                g.setColor(Lattice[i][j]);
                g.fillRect(displayPanel.getX() + i * 4, displayPanel.getY() + j * 4, 4, 4);
            }
        }
    }

    void randomSeedGrain(ArrayList<Color> colors, boolean dualPhase)
    {
        Random r = new Random();
        int randomX;
        int randomY;
        
        for (Color i : colors)
        {
            do{
            randomX = r.nextInt(SIZE - 2) + 1;
            randomY = r.nextInt(SIZE - 2) + 1;
            } while(Lattice[randomX][randomY] == BLACK && dualPhase);
            Lattice[randomX][randomY] = i;
        }     
    }
    
    void randomSeedGrainNucleon(ArrayList<Color> colors, boolean borders)
    {
        Random r = new Random();
        int randomX;
        int randomY;
        
        for (Color i : colors)
        {
            do{
            randomX = r.nextInt(SIZE - 2) + 1;
            randomY = r.nextInt(SIZE - 2) + 1;
            } while(borders ? isCellBound(randomX, randomY, getNeighbours(randomX, randomY)) : !isCellBound(randomX, randomY, getNeighbours(randomX, randomY)));
            Lattice[randomX][randomY] = i;
        }     
    }
  
    void randomSeed(ArrayList<Color> colors, boolean dualPhase)
    {
        Random r = new Random();
     
        for(int i = 1; i < SIZE - 1; i++)
        {
            for (int j = 1; j< SIZE - 1; j++)
            {
                if(Lattice[i][j] != BLACK || !dualPhase)
                    Lattice[i][j] = colors.get(r.nextInt(colors.size()));
            }
        }        
    }
    
    ArrayList<Point> randomPoints()
    {
        ArrayList<Point> list = new ArrayList<>();
        for (int i = 1; i < SIZE - 1; i++)
        {
            for (int j = 1; j < SIZE - 1; j++)
            {
                if(Lattice[i][j] != BLACK)
                    list.add(new Point(i, j));
            }
        }
        Collections.shuffle(list);
        return list;
    }
    
    void Reset()
    {
        for(int i = 1; i < SIZE - 1; i++)
        {
            for (int j = 1; j < SIZE - 1; j++)
            {
                Lattice[i][j] = BLACK;
            }
        }
        if (mcColors != null)
            mcColors.clear();
        if (caColors != null)
            caColors.clear();
        if (nucleonColors != null)
            nucleonColors.clear();
                
        renderLattice();
    }
    
    Color getRandomColor()
    {
        Random r = new Random();
        return new Color(r.nextFloat(), r.nextFloat(), r.nextFloat());
    }
    
    ArrayList<Color> getRandomColors(int count)
    {
        ArrayList<Color> list = new ArrayList<>();
        for (int i = 0; i < count; i++)
        {
            list.add(getRandomColor());
        }
        return list;
    }
 
    Color getRandomNucleonColor()
    {
        Random r = new Random();
        return new Color(0.f, 0.f, r.nextFloat());
    }
    
    ArrayList<Color> getRandomNucleonColors(int count)
    {
        ArrayList<Color> list = new ArrayList<>();
        for (int i = 0; i < count; i++)
        {
            list.add(getRandomNucleonColor());
        }
        return list;
    }
     
    private int getEnergy(int x, int y, List<Point> sasiedzi, Color tryNew) {
        int energy = 0;
        for (Point point : sasiedzi) // w zmiennej point mam kazdego sasiada 
        {
            if (tryNew == null) {
                if (Lattice[x][y] != Lattice[point.y][point.x]) {
                    energy++;
                }

            } else if (tryNew != Lattice[point.y][point.x]) {
                energy++;
            }
        }
        return energy;
    }
    
    public List<Point> getNeighbours(int x, int y) {       
        List<Point> neighbours = new ArrayList<>();

        neighbours.add(new Point(x - 1, y + 1));
        neighbours.add(new Point(x, y + 1));
        neighbours.add(new Point(x + 1, y + 1));
        neighbours.add(new Point(x + 1, y - 1));
        neighbours.add(new Point(x, y - 1));
        neighbours.add(new Point(x - 1, y - 1));
        neighbours.add(new Point(x + 1, y));
        neighbours.add(new Point(x - 1, y));
        
        return neighbours;
    }
    
    public List<Point> getNucleonNeighbours(int x, int y) {       
        List<Point> neighbours = new ArrayList<>();

        neighbours.add(new Point(x - 1, y + 1));
        neighbours.add(new Point(x, y + 1));
        neighbours.add(new Point(x + 1, y + 1));
        neighbours.add(new Point(x + 1, y - 1));
        neighbours.add(new Point(x, y - 1));
        neighbours.add(new Point(x - 1, y - 1));
        neighbours.add(new Point(x + 1, y));
        neighbours.add(new Point(x - 1, y));
        
        Iterator<Point> i = neighbours.iterator();
        while (i.hasNext()) {
            Point o = i.next();
            if (!nucleonColors.contains(Lattice[o.x][o.y]))    
                i.remove();
        }
        
        return neighbours;
    }
    
    private boolean isCellBound(int x, int y, List<Point> neighbours) {
        Iterator<Point> i = neighbours.iterator();
        while (i.hasNext()) {
            Point o = i.next();
            if (Lattice[o.x][o.y] == BLACK)    
                i.remove();
        }
        return neighbours.stream().anyMatch((p) -> (Lattice[p.y][p.x] != Lattice[x][y]));
    }
      
    void DP2() //TODO
    {
        Random r = new Random();
        Color inclusion = caColors.get(r.nextInt(caColors.size()));
        caColors.clear();
        
        for(int i = 1; i < SIZE - 1; i++)
        {
            for (int j = 1; j<SIZE - 1; j++)
            {
                Lattice[i][j] = Lattice[i][j] == inclusion ? BLACK : Lattice[i][j];
            }
        }
        renderLattice(); 
        
        CA(true);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    // End of variables declaration//GEN-END:variables

}